import random
import operator
import re

fase_atual = {}
nivel = 1
acertos_seguidos = 0

OPS = {
    "+": operator.add,
    "-": operator.sub,
    "*": operator.mul,
    "//": operator.floordiv
}

EMOJIS_CORES = {
    "vermelho": ["‚ù§Ô∏è", "üü•", "üçé", "üåπ", "üöó", "üî•", "üéà", "üìï", "üçì"],
    "azul": ["üíô", "üü¶", "üê≥", "üß¢", "üåä", "üíß", "ü™£", "ü´ê"],
    "verde": ["üíö", "üü©", "üçÄ", "üå≥", "ü•¶", "üê¢", "ü¶é", "üçè"],
    "amarelo": ["üíõ", "üü®", "üçã", "üê•", "üåª", "üåû", "‚ö°", "üßÄ"],
    "roxo": ["üíú", "üü™", "üçá", "üîÆ", "ü™ª", "üëæ"],
    "laranja": ["üß°", "üüß", "üçä", "ü¶ä", "ü•ï"],
    "preto": ["üñ§", "‚¨õ", "üêà‚Äç‚¨õ", "üé©", "üï∂Ô∏è"],
    "branco": ["ü§ç", "‚¨ú", "üêë", "ü•õ", "‚ùÑÔ∏è"]
}

CHARADAS_FACEIS = [
    ("Tem dentes, mas n√£o morde. O que √©?", "pente"),
    ("O que tem pesco√ßo, mas n√£o tem cabe√ßa?", "garrafa"),
    ("Quanto √© 7 - 7?", "0"),
    ("O que cai em p√© e corre deitado?", "chuva"),
    ("Quanto √© 2 + 3?", "5"),
    ("O que passa na frente do sol, mas n√£o faz sombra?", "vento"),
]

# --- Fun√ß√µes auxiliares robustas --- #

def clean_int_string(s):
    """Limpa e converte uma string em inteiro, ignorando espa√ßos e varia√ß√µes de tra√ßo."""
    if not s:
        return None
    s = s.strip()
    s = re.sub(r"[‚Äì‚Äî‚àí]", "-", s)  # substitui travess√µes por h√≠fen normal
    s = re.sub(r"\s+", "", s)  # remove TODOS os espa√ßos
    try:
        return int(s)
    except ValueError:
        return None


import re

def normalize_text(s: str) -> str:
    """Remove espa√ßos, pontua√ß√µes e deixa tudo min√∫sculo."""
    # Remove espa√ßos e pontua√ß√µes (vers√£o compat√≠vel com o re padr√£o)
    s = re.sub(r"[\s\W_]+", "", s.lower())  # \W remove tudo que n√£o √© letra ou n√∫mero
    return s



# --- Gera√ß√£o de perguntas --- #

def gerar_conta_inteira(nivel):
    """Gera uma conta simples de inteiros com resultado inteiro."""
    if nivel <= 2:
        op = random.choice(["+", "-"])
        a, b = random.randint(0, 9), random.randint(0, 9)
    elif nivel == 3:
        op = random.choice(["+", "-", "*"])
        a, b = random.randint(-10, 10), random.randint(1, 10)
    else:
        op = random.choice(["+", "-", "*", "//"])
        if op == "//":
            b = random.randint(1, 10)
            a = b * random.randint(-10, 10)
        else:
            a = random.randint(-30, 30)
            b = random.randint(-20, 20)

    resultado = OPS[op](a, b)
    return {"pergunta": f"Quanto √© {a} {op} {b}?", "resposta": str(resultado), "tipo": "conta"}


def gerar_pergunta_cor():
    cor = random.choice(list(EMOJIS_CORES.keys()))
    emoji = random.choice(EMOJIS_CORES[cor])
    return {"pergunta": f"Qual √© a cor deste emoji? {emoji}", "resposta": cor, "tipo": "cor"}


def gerar_charada(nivel):
    pergunta, resposta = random.choice(CHARADAS_FACEIS)
    return {"pergunta": pergunta, "resposta": resposta, "tipo": "charada"}


# --- Fluxo do jogo --- #

def proxima_pergunta():
    global fase_atual, nivel
    if nivel <= 2:
        tipo = "conta"
    elif nivel == 3:
        tipo = random.choice(["conta", "cor"])
    else:
        tipo = random.choice(["conta", "cor", "charada"])

    if tipo == "conta":
        fase_atual = gerar_conta_inteira(nivel)
    elif tipo == "cor":
        fase_atual = gerar_pergunta_cor()
    else:
        fase_atual = gerar_charada(nivel)

    return fase_atual["pergunta"]


def verificar_resposta(tentativa):
    global fase_atual, nivel, acertos_seguidos

    tentativa_int = clean_int_string(tentativa)
    resposta_int = clean_int_string(fase_atual.get("resposta", ""))

    tentativa_norm = normalize_text(tentativa)
    resposta_norm = normalize_text(fase_atual.get("resposta", ""))

    acertou = False

    # --- Compara√ß√£o num√©rica segura ---
    if tentativa_int is not None and resposta_int is not None:
        acertou = tentativa_int == resposta_int
    else:
        acertou = tentativa_norm == resposta_norm

    if acertou:
        acertos_seguidos += 1
        if acertos_seguidos % 3 == 0:
            nivel = min(nivel + 1, 5)
        msg = random.choice([
            "‚úÖ Acertou! Luiz est√° orgulhoso! üòé",
            "üéØ Boa! Subindo o n√≠vel!",
            "üëè Mandou bem! Luiz curtiu!"
        ])
        return True, msg

    acertos_seguidos = 0
    nivel = max(1, nivel - 0.2)

    dica = {
        "conta": "Revise o c√°lculo ‚Äî lembre-se: espa√ßos e sinais negativos contam! üòâ",
        "cor": "Olhe o emoji com calma e veja a cor principal üåà",
        "charada": "Pense fora da caixa! Luiz adora enigmas ü§ì"
    }.get(fase_atual.get("tipo"), "")

    msg = random.choice([
        f"‚ùå Errou! {dica}",
        f"üòÖ Quase l√°... {dica}",
        f"‚ùå N√£o foi dessa vez. {dica}"
    ])
    return False, msg
